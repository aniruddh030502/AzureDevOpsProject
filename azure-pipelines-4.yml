trigger:
- dependabot/npm_and_yarn/result/express-4.19.2

resources:
- repo: self

variables:
  azureSubscription: 'capstone2'
  resourceGroup: 'rg-aks-aniruddha'
  aksCluster1: 'aks-active-cluster'
  aksCluster2: 'aks-passive-cluster'
  dockerRegistryServiceConnection: 'bcdacaa8-1132-4ecf-9311-a8af866d6728'
  imageRepository: 'examplevotingapp'
  containerRegistry: 'aniruddhaacr03.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/result/Dockerfile'
  tag: 'latest'
  vmImageName: 'ubuntu-latest'

stages:
# ─────────────────────────────
- stage: BuildAndPushImage
  displayName: 'Build and Push Image'
  jobs:
  - job: Build
    displayName: 'Build and Push'
    pool:
      name: "Default"
    steps:
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

# ─────────────────────────────
- stage: SonarCloudAnalysis
  displayName: 'SonarCloud Code Analysis'
  dependsOn: BuildAndPushImage
  condition: succeeded()
  jobs:
  - job: AnalyzeFlask
    displayName: 'Analyze Flask App'
    pool:
      name: 'Default'
    steps:
    - checkout: self

    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'sonar03'
        organization: 'devuser100453'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'devuser100453_example-voting-app'
        cliProjectName: 'example-voting-app'
        cliSources: 'vote'
        extraProperties: |
          sonar.python.coverage.reportPaths=vote/coverage.xml

    - script: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r vote/requirements.txt
        cd vote
        coverage run -m unittest discover
        coverage xml -o coverage.xml
      displayName: 'Run Unit Tests and Generate Coverage Report'

    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'

# ─────────────────────────────
- stage: TrivyScan
  displayName: 'Run Trivy Scan on Image'
  dependsOn: BuildAndPushImage
  condition: succeeded()
  jobs:
  - job: TrivyScan
    displayName: 'Scan Docker Image for Vulnerabilities'
    pool:
      name: "Default"
    steps:
    - task: Bash@3
      displayName: 'Install Trivy'
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    - task: Bash@3
      displayName: 'Run Trivy Scan'
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image --severity HIGH,CRITICAL,MEDIUM --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
          if [[ $? -ne 0 ]]; then
            echo "Trivy found vulnerabilities, failing the build."
            exit 1
          fi

# ─────────────────────────────
- stage: DeployToAKS
  displayName: 'Deploy to AKS Clusters'
  dependsOn: BuildAndPushImage
  condition: succeeded()
  pool:
    name: "Default"
  jobs:
  - job: DeployToAKS1
    displayName: 'Deploy to AKS Cluster 1'
    steps:
    - task: Kubernetes@1
      displayName: 'Apply Kubernetes Manifests (Cluster 1)'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: '$(azureSubscription)'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster1)'
        command: 'apply'
        arguments: '-f k8s-specifications/vote-deployment.yaml -f k8s-specifications/vote-service.yaml'

  - job: DeployToAKS2
    displayName: 'Deploy to AKS Cluster 2'
    steps:
    - task: Kubernetes@1
      displayName: 'Apply Kubernetes Manifests (Cluster 2)'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: '$(azureSubscription)'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster2)'
        command: 'apply'
        arguments: '-f k8s-specifications/vote-deployment.yaml -f k8s-specifications/vote-service.yaml'
