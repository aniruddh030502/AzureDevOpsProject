# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dependabot/npm_and_yarn/result/express-4.19.2

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  azureSubscription: 'capstone2' # Create this in Project Settings -> Service connections
  resourceGroup: 'rg-aks-active'
  aksCluster1: 'aks-active-cluster'
  aksCluster2: 'aks-passive-cluster'
  dockerRegistryServiceConnection: '567d90b6-117d-4f90-be1c-7dd06b595f42'
  # imageRepository: 'examplevotingappvote'
  # containerRegistry: 'yogeshacr1.azurecr.io'
  # dockerfilePath: '$(Build.SourcesDirectory)/vote/Dockerfile'
  # tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: DeployToAKS
  displayName: 'Deploy to AKS'
  pool:
    name: "Default"
  condition: succeeded() # Only run if the previous stage succeeded
  jobs:
  - job: Deploy1
    displayName: 'Deploy Backend Service'
    steps:
    - task: Kubernetes@1
      displayName: 'Apply Redis Manifests'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'capstone2'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster1)'
        command: 'apply'
        arguments: '-f k8s-specifications/redis-deployment.yaml -f k8s-specifications/redis-service.yaml' # Adjust paths as needed
      

    - task: Kubernetes@1
      displayName: 'Apply PostgreSQL Manifests'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'capstone2'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster1)'
        command: 'apply'
        arguments: '-f k8s-specifications/db-deployment.yaml -f k8s-specifications/db-service.yaml'
  - job: Deploy2
    displayName: 'Deploy Backend Service'
    steps:
    - task: Kubernetes@1
      displayName: 'Apply Redis Manifests'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'capstone2'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster2)'
        command: 'apply'
        arguments: '-f k8s-specifications/redis-deployment.yaml -f k8s-specifications/redis-service.yaml' # Adjust paths as needed
      

    - task: Kubernetes@1
      displayName: 'Apply PostgreSQL Manifests'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'capstone2'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster2)'
        command: 'apply'
        arguments: '-f k8s-specifications/db-deployment.yaml -f k8s-specifications/db-service.yaml'