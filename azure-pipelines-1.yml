trigger:
- dependabot/npm_and_yarn/result/express-4.19.2

resources:
- repo: self

variables:
  azureSubscription: 'capstone2'
  resourceGroup: 'rg-aks-active'
  aksCluster1: 'aks-active-cluster'
  aksCluster2: 'aks-passive-cluster'
  dockerRegistryServiceConnection: 'acrconnect'
  containerRegistry: 'aksmultiregistryani.azurecr.io'
  imageVotes: 'examplevotingappvotes'
  imageResult: 'examplevotingappresult'
  dockerfileVotes: '$(Build.SourcesDirectory)/vote/Dockerfile'
  dockerfileResult: '$(Build.SourcesDirectory)/result/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildAndPushImage
  displayName: 'Build and Push Images'
  jobs:
  - job: BuildVotes
    displayName: 'Build Vote Image'
    pool:
      name: 'Default'
    steps:
    - task: Docker@2
      displayName: 'Build and push vote image to ACR'
      inputs:
        command: buildAndPush
        repository: $(imageVotes)
        dockerfile: $(dockerfileVotes)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

  - job: BuildResult
    displayName: 'Build Result Image'
    pool:
      name: 'Default'
    steps:
    - task: Docker@2
      displayName: 'Build and push result image to ACR'
      inputs:
        command: buildAndPush
        repository: $(imageResult)
        dockerfile: $(dockerfileResult)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: DeployToAKS
  displayName: 'Deploy to AKS Clusters'
  dependsOn: BuildAndPushImage
  condition: succeeded()
  jobs:
  - job: DeployCluster1
    displayName: 'Deploy to AKS Cluster 1'
    steps:
    - script: |
        sed -i 's|REPLACE_ME_IMAGE_VOTE|$(containerRegistry)/$(imageVotes):$(tag)|' k8s-specifications/vote-deployment.yaml
        sed -i 's|REPLACE_ME_IMAGE_RESULT|$(containerRegistry)/$(imageResult):$(tag)|' k8s-specifications/result-deployment.yaml
      displayName: 'Inject image names into deployment files'
    - task: Kubernetes@1
      displayName: 'Apply Manifests to AKS Cluster 1'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: '$(azureSubscription)'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster1)'
        command: 'apply'
        arguments: >
          -f k8s-specifications/vote-deployment.yaml
          -f k8s-specifications/vote-service.yaml
          -f k8s-specifications/result-deployment.yaml
          -f k8s-specifications/result-service.yaml

  - job: DeployCluster2
    displayName: 'Deploy to AKS Cluster 2'
    steps:
    - script: |
        sed -i 's|REPLACE_ME_IMAGE_VOTE|$(containerRegistry)/$(imageVotes):$(tag)|' k8s-specifications/vote-deployment.yaml
        sed -i 's|REPLACE_ME_IMAGE_RESULT|$(containerRegistry)/$(imageResult):$(tag)|' k8s-specifications/result-deployment.yaml
      displayName: 'Inject image names into deployment files'
    - task: Kubernetes@1
      displayName: 'Apply Manifests to AKS Cluster 2'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: '$(azureSubscription)'
        azureResourceGroup: '$(resourceGroup)'
        kubernetesCluster: '$(aksCluster2)'
        command: 'apply'
        arguments: >
          -f k8s-specifications/vote-deployment.yaml
          -f k8s-specifications/vote-service.yaml
          -f k8s-specifications/result-deployment.yaml
          -f k8s-specifications/result-service.yaml
